---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: caddy
  labels:
    app.kubernetes.io/name: caddy
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: caddy
  template:
    metadata:
      labels:
        app.kubernetes.io/name: caddy
    spec:
      # This Deployment uses a persistent volume claim. This requires
      # that in order to enable rolling updates (i.e. use a deployment
      # strategy other than Replace), we schedule the new Pod to the
      # same node as the original Pod.
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - caddy
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: caddy
          image: docker.io/caddy:2.7.4
          env:
          - name: default_site_port
            value: ":80"
          volumeMounts:
            - mountPath: /etc/caddy/
              name: config
            - mountPath: /data/
              name: data
          ports:
            - containerPort: 80
            - containerPort: 443
      volumes:
        - name: config
          configMap:
            name: caddy-config
        - name: data
          persistentVolumeClaim:
            claimName: caddy
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cms
  labels:
    app.kubernetes.io/name: cms
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: cms
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cms
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
      containers:
        - name: cms
          image: docker.io/overhangio/openedx:20.0.0-indigo
          env:
          - name: SERVICE_VARIANT
            value: cms
          - name: DJANGO_SETTINGS_MODULE
            value: cms.envs.tutor.production
          - name: UWSGI_WORKERS
            value: "2"
          ports:
            - containerPort: 8000
          volumeMounts:
            - mountPath: /openedx/edx-platform/lms/envs/tutor/
              name: settings-lms
            - mountPath: /openedx/edx-platform/cms/envs/tutor/
              name: settings-cms
            - mountPath: /openedx/config
              name: config
            - mountPath: /openedx/uwsgi.ini
              name: uwsgi-config
              subPath: uwsgi.ini
          resources:
            requests:
              memory: 2Gi
          securityContext:
            allowPrivilegeEscalation: false
      volumes:
        - name: settings-lms
          configMap:
            name: openedx-settings-lms
        - name: settings-cms
          configMap:
            name: openedx-settings-cms
        - name: config
          configMap:
            name: openedx-config
        - name: uwsgi-config
          configMap:
            name: openedx-uwsgi-config
            items:
              - key: uwsgi.ini
                path: uwsgi.ini
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cms-worker
  labels:
    app.kubernetes.io/name: cms-worker
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: cms-worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cms-worker
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
      containers:
        - name: cms-worker
          image: docker.io/overhangio/openedx:20.0.0-indigo
          args:
          
          - "celery"
          - "--app=cms.celery"
          - "worker"
          - "--loglevel=info"
          - "--hostname=edx.cms.core.default.%h"
          - "--queues=edx.cms.core.default,edx.cms.core.high,edx.cms.core.low"
          - "--max-tasks-per-child=100"
          - "--prefetch-multiplier=1"
          - "--without-gossip"
          - "--without-mingle"
          env:
          - name: SERVICE_VARIANT
            value: cms
          - name: DJANGO_SETTINGS_MODULE
            value: cms.envs.tutor.production
          volumeMounts:
            - mountPath: /openedx/edx-platform/lms/envs/tutor/
              name: settings-lms
            - mountPath: /openedx/edx-platform/cms/envs/tutor/
              name: settings-cms
            - mountPath: /openedx/config
              name: config
          securityContext:
            allowPrivilegeEscalation: false
      volumes:
        - name: settings-lms
          configMap:
            name: openedx-settings-lms
        - name: settings-cms
          configMap:
            name: openedx-settings-cms
        - name: config
          configMap:
            name: openedx-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lms
  labels:
    app.kubernetes.io/name: lms
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: lms
  template:
    metadata:
      labels:
        app.kubernetes.io/name: lms
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
      containers:
        - name: lms
          image: docker.io/overhangio/openedx:20.0.0-indigo
          env:
          - name: SERVICE_VARIANT
            value: lms
          - name: DJANGO_SETTINGS_MODULE
            value: lms.envs.tutor.production
          - name: UWSGI_WORKERS
            value: "2"
          ports:
            - containerPort: 8000
          volumeMounts:
            - mountPath: /openedx/edx-platform/lms/envs/tutor/
              name: settings-lms
            - mountPath: /openedx/edx-platform/cms/envs/tutor/
              name: settings-cms
            - mountPath: /openedx/config
              name: config
            - mountPath: /openedx/uwsgi.ini
              name: uwsgi-config
              subPath: uwsgi.ini
          resources:
            requests:
              memory: 2Gi
          securityContext:
            allowPrivilegeEscalation: false
      volumes:
        - name: settings-lms
          configMap:
            name: openedx-settings-lms
        - name: settings-cms
          configMap:
            name: openedx-settings-cms
        - name: config
          configMap:
            name: openedx-config
        - name: uwsgi-config
          configMap:
            name: openedx-uwsgi-config
            items:
            - key: uwsgi.ini
              path: uwsgi.ini
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lms-worker
  labels:
    app.kubernetes.io/name: lms-worker
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: lms-worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: lms-worker
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
      containers:
        - name: lms-worker
          image: docker.io/overhangio/openedx:20.0.0-indigo
          args: 
          - "celery"
          - "--app=lms.celery"
          - "worker"
          - "--loglevel=info"
          - "--hostname=edx.lms.core.default.%h"
          - "--queues=edx.lms.core.default,edx.lms.core.high,edx.lms.core.high_mem"
          - "--max-tasks-per-child=100"
          - "--prefetch-multiplier=1"
          - "--without-gossip"
          - "--without-mingle"
          env:
          - name: SERVICE_VARIANT
            value: lms
          - name: DJANGO_SETTINGS_MODULE
            value: lms.envs.tutor.production
          volumeMounts:
            - mountPath: /openedx/edx-platform/lms/envs/tutor/
              name: settings-lms
            - mountPath: /openedx/edx-platform/cms/envs/tutor/
              name: settings-cms
            - mountPath: /openedx/config
              name: config
          securityContext:
            allowPrivilegeEscalation: false
      volumes:
        - name: settings-lms
          configMap:
            name: openedx-settings-lms
        - name: settings-cms
          configMap:
            name: openedx-settings-cms
        - name: config
          configMap:
            name: openedx-config

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: meilisearch
  labels:
    app.kubernetes.io/name: meilisearch
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: meilisearch
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: meilisearch
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"
      containers:
        - name: meilisearch
          image: docker.io/getmeili/meilisearch:v1.8.4
          env:
            - name: MEILI_MASTER_KEY
              value: "AwrIf1W4tAOky8C1qDkYg4fc"
          ports:
            - containerPort: 7700
          securityContext:
            allowPrivilegeEscalation: false
          volumeMounts:
            - mountPath: /meili_data
              name: data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: meilisearch


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  labels:
    app.kubernetes.io/name: mongodb
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
        fsGroupChangePolicy: "OnRootMismatch"
      containers:
        - name: mongodb
          image: docker.io/mongo:7.0.7
          args: ["mongod", "--storageEngine", "wiredTiger"]
          ports:
            - containerPort: 27017
          volumeMounts:
            - mountPath: /data/db
              name: data
          securityContext:
            allowPrivilegeEscalation: false
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: mongodb


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app.kubernetes.io/name: mysql
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mysql
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
        fsGroupChangePolicy: "OnRootMismatch"
      containers:
        - name: mysql
          image: docker.io/mysql:8.4.0
          args:
            - "mysqld"
            - "--character-set-server=utf8mb4"
            - "--collation-server=utf8mb4_unicode_ci"
            - "--binlog-expire-logs-seconds=259200"
            - "--mysql-native-password=ON"
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "Deadthemonkiller123"
          ports:
            - containerPort: 3306
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: data
          securityContext:
            allowPrivilegeEscalation: false
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: mysql


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: smtp
  labels:
    app.kubernetes.io/name: smtp
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: smtp
  template:
    metadata:
      labels:
        app.kubernetes.io/name: smtp
    spec:
      securityContext:
        runAsUser: 100
        runAsGroup: 101
      containers:
        - name: smtp
          image: docker.io/devture/exim-relay:4.96-r1-0
          ports:
            - containerPort: 8025


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  labels:
    app.kubernetes.io/name: redis
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"
      containers:
        - name: redis
          image: docker.io/redis:7.2.4
          args: ["redis-server", "/openedx/redis/config/redis.conf"]
          workingDir: /openedx/redis/data
          ports:
            - containerPort: 6379
          volumeMounts:
            - mountPath: /openedx/redis/config/
              name: config
            - mountPath: /openedx/redis/data
              name: data
          securityContext:
            allowPrivilegeEscalation: false
      volumes:
        - name: config
          configMap:
            name: redis-config
        - name: data
          persistentVolumeClaim:
            claimName: redis

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mfe
  labels:
    app.kubernetes.io/name: mfe
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mfe
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mfe
    spec:
      containers:
        - name: mfe
          image: docker.io/overhangio/openedx-mfe:20.0.0-indigo
          ports:
            - containerPort: 8002
          volumeMounts:
            - mountPath: /etc/caddy/
              name: config
      volumes:
        - name: config
          configMap:
            name: mfe-caddy-config